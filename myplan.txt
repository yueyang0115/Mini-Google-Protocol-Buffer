1.
Task: Create a class called FieldGenerator which takes one field(one name and one type), and can generate one field. 
Estimated Time: 1 hour
Target Deadline: 01/29 
Actual Time: 1 hour
Actual Delivery: 01/29
Commit ID: 778c83c4
Comments: It took shorter time than I expected. I just didn't realize that all this task need is hard coding when I made the plan. First time writing java takes some more time.

2.
Task: Generate get/set method for one field in FieldGenerator class. 
Estimated Time: 1 hour
Target Deadline: 01/29 
Actual Time: 0.5 hour
Actual Delivery: 01/29
Commit ID: 778c83c4
Comments: It took shorter time than I expected because I overestimated the difficulty.

3.
Task: Create a class called FieldParser. Parse jsonarray field and get a hashmap containing "name" and "type".
Estimated Time: 2 hour
Target Deadline: 01/30
Actual Time: 4 hour
Actual Delivery: 01/30
Commit ID: 6bd3d238
Comments: At first I tried to parse from the raw json string. It took me a long time to figure out how to use JsonArray and JsonObject, then I realized it was hard to debug and to think about the whole frame if I write a parse class which starts from parsing the original json file, so I minimize the parsed scale and changed to only parse one field. It was very easy to debug.

4.
Task: Create a class called ClassParser. Parse jsonarray classes and get a hashmap containing "classname" and "classfield", classfield is got by calling FieldParser.
Estimated Time: 1.5 hour
Target Deadline: 01/30
Actual Time: 1 hour
Actual Delivery: 01/31
Commit ID:3dc6cc01
Comments: It was easy to write ClassParser since it is similar with FieldBuilder.

5.
Task: Create a class called Parser that can take raw jsonobject, return package name and Classmap.
Estimated Time: 1 hour
Target Deadline: 01/30
Actual Time: 0.6 hour
Actual Delivery: 01/31
Commit ID:59b64b51
Comments: It was easy to write Parser since it is similar with ClassParser.

6.
Task: ClassBuilder can take a json string, parse to fields. 
Estimated Time: 1 hour
Target Deadline: 01/30
Actual Time: 1 hour
Actual Delivery: 01/31
Commit ID: fc65f5a6
Comments: It is easy to write since all the previous work are done. Just need to pay attention to corner case.

7.
Task: Create a class called ClassGenerator. It takes one class name and correponding fieldmap, calls FieldGenerator and returns the class content as string. 
Estimated Time: 1 hour
Target Deadline: 01/29
Actual Time: 1.5 hour
Actual Delivery: 02/01
Commit ID: a7ebb261
Comments: I spend a lot of time thinking about a better way to split my code into classes. Testing also takes some time. I did this task later on purpose because I realized that it was better to finish some other tasks before this one.

8.
Task: Create a class called Generator. It takes a classmap, calls ClassGenerator and returns the class content as string. 
Estimated Time: 1 hour
Target Deadline: 01/29
Actual Time: 1.5 hour
Actual Delivery: 02/01
Commit ID: a7ebb261
Comments: I spend a lot of time thinking about a better way to split my code into classes and what type of data I should return. Testing also takes some time. I did this task later on purpose because I realized that it was better to finish some other tasks before this one.

9.
Task: Connect parsing json object with generating code. Classbuilder can take json file and get source code in string. 
Estimated Time: 0.5 hour
Target Deadline: 01/30
Actual Time: 0.5 hour
Actual Delivery: 02/01
Commit ID: 51627471
Comments: Easy to realize since I have thought about this task while doing previous tasks.

10. 
Task: Realize ClassBuilder's getSourceCode method.
Estimated Time: 1 hour
Target Deadline: 02/02
Actual Time: 15 min
Actual Delivery: 02/02
Commit ID: 
Comments: Easy to realize since other codes are already written and tested.

11.
Task: Realize ClassBuilder's getClassNames method.
Estimated Time: 1 hour
Target Deadline: 02/02
Actual Time: 
Actual Delivery: 
Commit ID: 
Comments: 

12.
Task: Realize ClassBuilder's creatAllClasses method and generate code to file.
Estimated Time: 2 hour
Target Deadline: 02/02
Actual Time: 
Actual Delivery: 
Commit ID: 
Comments: 

13.
Task: Modify FieldGenerator, check whether the type is array and handle recursive e situation.
Estimated Time: 2 hour
Target Deadline: 02/02
Actual Time:
Actual Delivery:
Commit ID:
Comments:

14.
Task: Modify FieldGenerator and generate fields for array type.
Estimated Time: 2 hour
Target Deadline: 02/02
Actual Time:
Actual Delivery:
Commit ID:
Comments:

15.
Task: Modify FieldGenerator, generate methods for array. 
Estimated Time: 1.5 hour
Target Deadline: 02/02
Actual Time:
Actual Delivery:
Commit ID:
Comments:I did this task later on purpose because I realized that it was better to finish some other tasks before this one.

16.
Task: Modify FieldGenerator, generate constructor for array.
Estimated Time: 2 hour
Target Deadline: 02/02
Actual Time:
Actual Delivery:
Commit ID:
Comments:

17.
Task: Realize basic serialization.
Estimated Time: 3 hour
Target Deadline: 02/03
Actual Time:
Actual Delivery:
Commit ID:
Comments:

18.
Task: Realize basic deserialization.
Estimated Time: 3 hour
Target Deadline: 02/03
Actual Time:
Actual Delivery:
Commit ID:
Comments:

19.
Task: Modify Serialization and handle object field situation.
Estimated Time: 2 hour
Target Deadline: 02/03
Actual Time:
Actual Delivery:
Commit ID:
Comments:

